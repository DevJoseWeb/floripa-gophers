As Novidades do Go 1.10
17 Mar 2018
Tags: golang, 1.10

Ricardo Longa
Software Craftsman, Neoway
@ricardolonga 

Ellen KÃ¶rbes
@ellenkorbes

* Go 1.10

- Ã‰ o 11Âº release da linguagem.

- LanÃ§ado em 16 de fevereiro de 2018.

- O Go Playground jÃ¡ roda 1.10, teste com:

     fmt.Println(runtime.Version())

* TÃ³picos

Vamos falar sobre:

- O spec da linguagem
- Os ports
- As ferramentas
- A standard library
- Performance

- Que mais?

* Linguagem

* Escove bem os seus bits!

Foi corrigida uma inconsistÃªncia na linguagem:

    const s = 10
    a := make([]byte, 1.0<<s) // Na 1.9: vÃ¡lido.
    _ = a[1.0<<s]             // Na 1.9: erro.

Agora podemos utilizar consistentemente constantes nÃ£o-tipadas como operador em operaÃ§Ãµes de shifting sobre valores nÃ£o constantes (1.0 no exemplo acima). O tipo da constante serÃ¡ `int` nesses casos. (Para mais, [[https://go-review.googlesource.com/c/go/+/60230][clique]].)

Ufa!

* MÃ©todos

Chamadas de mÃ©todos do tipo `struct{io.Reader}.Read()`, que jÃ¡ eram aceitas pelo compilador, agora sÃ£o oficialmente aceitas pela gramÃ¡tica da linguagem. Exemplo:

    type MyType struct { io.Reader }

    func main() {
        m := MyType{}
        dst := make([]byte, 10)
        l, err := struct{io.Reader}.Read(m, dst)
        _, _, _ = l, err, dst
    }

Mas... erros:

    go.struct { io.Reader }.Read: call to external function
    main.main: relocation target go.struct { io.Reader }.Read not defined
    main.main: undefined: "go.struct { io.Reader }.Read"

Vamos ter que esperar pela 1.11 para poder utilizar.

* Ports

* TÃ©dio:

- FreeBSD: agora requer FreeBSD 10.3 or later
- NetBSD: requer NetBSD 8, que ainda nÃ£o foi lanÃ§ado. GOARCH amd64 e 386 funcionam, arm tÃ¡ quebrado.
- OpenBSD: a prÃ³xima versÃ£o (1.11) vai requerer OpenBSD 6.2.
- Para sistemas MIPS de 32-bits, agora temos uma variÃ¡vel GOMIPS, que pode ser `hardfloat` ou `softfloat`, e serve para determinar se vamos utilizar instruÃ§Ãµes de hardware ou emulaÃ§Ã£o atravÃ©s de software para computaÃ§Ãµes com floating points. Bom saber, caso vocÃª queira rodar cÃ³digo nos processadores MIPS do seu Nintendo 64 ou Playstation 2.

* Importante:

Go 1.10 Ã© a Ãºltima versÃ£o que vai rodar em:

- OS X 10.8 Mountain Lion ou OS X 10.9 Mavericks. Go 1.11 vai rodar somente em OS X 10.10 Yosemite ou mais recentes.
- Windows XP ou Windows Vista. Go 1.11 vai rodar somente em Windows 7 ou mais recentes.

Detalhe:

"And even after Go 1.12 comes out, you can keep using Go 1.10, we just won't fix bugs in it. But if you're happy with it (or Go 1.9 or whatever version), great. You won't get security fixes, but if you are running XP you're not worried about that." â€” [[https://github.com/golang/go/issues/23380#issuecomment-356346724][Russ Cox]]

* Ferramentas

* Set-up:

`GOPATH` virou opcional na 1.8.

`GOROOT` tambem Ã© opcional agora.

`GOTMPDIR` Ã© nova, e determina onde vÃ£o os arquivos temporÃ¡rios.

* Caching

go install e go build agora sÃ£o mais rÃ¡pidos
go build -i
Pasta pkg pode eventualmente desaparecer?

* Testes

Testes com caching
Testes agora rodam vet
-failfast flag

* Um parÃªnteses: slicing com 3 Ã­ndices

Dois Ã­ndices:

.play bytes/slicing.go /START/,/END/

* Um parÃªnteses: slicing com 3 Ã­ndices

TrÃªs Ã­ndices:

.play bytes/slicing2.go /START/,/END/

* gofmt

Slicing com 3 Ã­ndices. 

Antes era:

    a[i : j:k]

Agora Ã©:

    a[i : j : k]

- interface com mÃ©todo de uma linha

* Outros:

go get agora suporta Fossil
go fix "golang.org/x/net/context" â†’ "context"
"go tool fix ."
documentaÃ§Ã£o diagnosticos https://golang.org/doc/diagnostics.html

* Standard library

- NÃ£o hÃ¡ packages novos

* bytes

Fields, FieldsFunc, Split, SplitAfter retornam slice novo

(exemplos)

* flags

FormataÃ§Ã£o quando tem \n na descriÃ§Ã£o de um flag:

.play flag/main.go /START/,/END/

Antes:

    -x int
        Essa explicaÃ§Ã£o Ã©
    bem longa, sacoÃ©?
    -y int
        Essa Ã© curtinha.

Agora:

    -x int
        Essa explicaÃ§Ã£o Ã©
        bem longa, sacoÃ©?
     -y int
        Essa Ã© curtinha.

* go/doc

Exemplo:

.code coisas/coisas.go

* go/doc

    $ go doc coisas

Antes:

    package coisas // import "github.com/ellenkorbes/floripa-gophers/1.10/coisas"

    func ManyCoisas() []Coisa
    type Coisa
        func NewCoisa() *Coisa

Agora:

    package coisas // import "github.com/ellenkorbes/floripa-gophers/1.10/coisas"

    type Coisa
        func ManyCoisas() []Coisa
        func NewCoisa() *Coisa

* text/template

Agora temos `{{break}}` e `{{continue}}` no `{{range}}`:

.play template/main.go /var tmpl/,/\)\)/

Curiosamente, isto nÃ£o estÃ¡ implementado na package html/template.

* strings

Isso Ã© bastante comum:

    var buf bytes.Buffer
    fmt.Fprintln(&buf, "E aÃ­, galera!")
    fmt.Printf(buf.String())

Mas `.String()` requer alocaÃ§Ãµes de memÃ³ria jÃ¡ que ele converte `[]byte` para `string`.

Agora temos:

	var b strings.Builder
	fmt.Fprintln(&b, "E aÃ­, galera!")
	fmt.Printf(b.String())

* strings

    for i := 0; i < 10000; i++ {
        fmt.Fprintf(w, "ðŸ˜Š")
        out = w.String()
    }

Nesta funÃ§Ã£o temos:

    $ go test -bench=. -benchmem
    goos: darwin
    goarch: amd64
    pkg: github.com/campoy/talks/go1.10/strings
    BenchmarkBuffer-4            100          20861915 ns/op        215641272 B/op     10317 allocs/op
    BenchmarkBuilder-4          3000            535081 ns/op          153647 B/op         22 allocs/op
    PASS
    ok      github.com/campoy/talks/go1.10/strings  3.626s

Mas se comentarmos a linha 

    out = w.String()
    
aÃ­ a performance Ã© levemente pior.

* unicode

novos emoji

* bufio

- Reader e Write agora tem v.Size()

* encoding/json

- DisallowUnknownFields
- Unmarshal can no longer decode into fields inside embedded pointers to unexported struct types, because it cannot initialize the unexported embedded pointer to point at fresh storage.

* math

math - the new functions Round and RoundToEven round their arguments to the nearest floating-point integer; Round rounds a half-integer to its larger integer neighbor (away from zero) while RoundToEven rounds a half-integer to its even integer neighbor

* math/rand 

the new math/rand.Shuffle function and corresponding math/rand.* Rand.Shuffle method shuffle an input sequence *

* net

blablabla

* net/https

blablabla

* os

* outros


* Performance

* Garbage collector:

Mesma coisa.

* Performance de execuÃ§Ã£o:

Mesma coisa.

* Performance de compilaÃ§Ã£o:

10% mais rÃ¡pida!

    $ benchstat go1.9.3.txt go.1.10rc1.txt 
    name       old time/op       new time/op       delta
    Template         234ms Â± 4%        231ms Â± 4%     ~     (p=0.101 n=10+8)
    Unicode          107ms Â± 1%        109ms Â± 6%     ~     (p=0.211 n=9+10)
    GoTypes          742ms Â± 2%        744ms Â± 2%     ~     (p=0.905 n=9+10)
    Compiler         3.50s Â± 3%        3.54s Â± 5%     ~     (p=0.393 n=10+10)
    SSA              6.95s Â± 4%        9.04s Â± 5%  +29.98%  (p=0.000 n=10+10)
    Flate            149ms Â± 2%        147ms Â± 5%   -1.53%  (p=0.035 n=10+9)
    GoParser         189ms Â± 3%        183ms Â± 3%   -3.44%  (p=0.002 n=9+9)
    Reflect          476ms Â± 5%        489ms Â± 6%   +2.90%  (p=0.043 n=10+10)
    Tar              134ms Â± 1%        220ms Â± 3%  +64.14%  (p=0.000 n=9+10)
    XML              258ms Â± 6%        266ms Â± 6%   +2.90%  (p=0.043 n=10+10)
    StdCmd           19.1s Â± 1%        17.1s Â± 3%  -10.57%  (p=0.000 n=10+10)

.caption Following [[https://golang.org/x/tools/cmd/compilebench][https://golang.org/x/tools/cmd/compilebench]].
.caption Run on a Google Compute Engine instance with 8 cores.

* Extras

* UnlockOSThread/LockOSThread

Sei lÃ¡.

* CGO

Sei lÃ¡.

Mesma coisa.

* Agradecimentos:

- Francesc Campoy
- Florin PÄƒÈ›an
- Dinesh Kumar